doctype html
html
  head
    meta(charset='UTF-8')
    style.
      .myholder {
      width: 800px;
      height: 800px;
      border-top: 2px solid black;
      border-bottom: 2px solid black;
      }
    title GPython
    link(rel='stylesheet', type='text/css', href='/stylesheets/joint.css')
    link(rel='stylesheet', type='text/css', href='/stylesheets/mycss.css')
    script(src='/javascripts/jquery.min.js')
    script(src='/javascripts/lodash.min.js')
    script(src='/javascripts/backbone-min.js')
    script(src='/javascripts/joint.js')
    script(src='/javascripts/joint.shapes.devs.js')
  body
    .head
      .fonts
        p
          | This is an interactive graphing tool for running Python scripts and analyzing data
    .container
      .col
        .col1
          form(name='python', method='POST')
            input(type='submit', value='Run a single cell', class = 'button')
          form(method='POST', action='/file_upload', enctype='multipart/form-data', class = 'filearea')
            label.custom-file-upload(for='file-upload')
              span#file1( class = 'choose')
                | Choose your first file      
              input#file-upload(type='file', name = 'foo' style='display:none;')
            label.custom-file-upload(for = 'file-upload2')
              span#file2(class = 'choose')
                | Choose your second file
              //- p(class = 'choose')
              //-   | Choose your second file
              input#file-upload2(type = 'file', name = 'foo2', style = 'display:none;', )

            //- input(type='file', name='foo', size='50' )
            input(type='submit', value='Upload Files' class = 'button'  onclick = 'seek();')
            br 
            span #{message}
          form(action='/index', method='POST', name='hello', onsubmit='savejson();')
            | Paste your JSON file here: 
            input#hh(type='text', name='JSON file')
            input(type='submit', name='Run', value='Run', class = 'button' )
            //p
            //  | Click on the paper below to create a cell, right click to delete the cell. Click Run to run your graph, or you can paste the json file of a graph above and run that graph.
          form(action = "javascript:gJ();")
            input(type ="submit" value ='Run' class = 'button')
          form(action = "javascript:loadRegression();")
            input(type = 'submit' value = 'Load Regression Template' class = 'button')
          form()
            input(type = 'submit' value = 'Load Summary Template' class = 'button')
          form()
            input(type = 'submit' value = 'Load Train Test Split Template' class = 'button')
          
        .col2
          form(action = "javascript:show();")
            input(id = 'hahaha', type = 'submit', name = 'why2', value = 'show the summary of the first dataset', class = 'button')
          .helo
            | The data summary will be shown here
          .dropDown(style= 'display: none;')
            form(name = 'drop', id = 'selectform' action = '/')
              select(multiple='' style = 'height:100px;' id ='selection' name = 'bar')
          form(action = "javascript:createdataCell();")
            input(type = 'submit', name = 'hahahaha', value = 'create a data cell', class = 'button2')
          form(action = "javascript:promptOutputCell();")
            input(type = 'submit', name = 'ha', value = 'create an output cell', class = 'button3')
          span(id = 'infodata')  #{datainfo} 

        script.
          $("selectform").on('focus', function(ev){
            console.log('saving value');
          });


          $("input[name = 'foo']").on("change", function(ev){
            //- var prev = $(this).data();
            //- for (var i in prev) console.log(i);
            //- console.log(prev);
            var fileinput = document.getElementById('file-upload').value.replace(/^.*[\\\/]/, '');
            var thetext = fileinput == ''?'Choose your first file':fileinput;         
            $('#file1').text(thetext);
          });

          $("input[name = 'foo2']").on("change", function(ev){
            var fileinput = document.getElementById('file-upload2').value.replace(/^.*[\\\/]/, '');
            var thetext = fileinput == ''?'Choose your second file':fileinput;         
            $('#file2').text(thetext);
          });

          $("selectform").submit(function(event){
            event.preventDefault();
            console.log('submitting');
            var $form = $(this),
                url = $form.attr('action');
            var posting = $.post(url, {name: $('#selection.val()')})
          });

          function seek(){
            $('#hahaha').show();
          }
          function show(){
            $.post("/show_summary", function(data, status){
              //- $('.helo').text(data);
              console.log(data);
              const str = data.split(',');
              console.log(str[0]);
              $('.helo').css('color','black');
              $('.helo').css('font-size', '20px');
              var select = document.getElementById('selection');
              for (let i = 0; i < str.length; i++ ){
                $('#selection').append($('<option>', {text: str[i], value: str[i]}));
                //- select.options[i].text = str[i];
                //- console.log(str[i]);
              }
              //- $('.helo').css('border','2px solid black');
              $('.dropDown').show();
            
            });
          }
      script.
        function changeval(){
        var a = prompt("enter the link name");
        document.getElementById('links').value = a;
        console.log(document.getElementById('links').value);
        } 
      .col3
        #paper.paper
          #myholder
          script.
            var graph = new joint.dia.Graph;
            var paper = new joint.dia.Paper({
              el: $('#paper'),
              width: $('.paper').width(), height: $('.paper').height(), gridSize: 1,
              model: graph,
              background: {
              color: '#e6e6e6'
              },
              defaultLink: new joint.dia.Link({
                attrs: { '.marker-target': { d: 'M 10 0 L 0 5 L 10 10 z' }},
                type: 'link',
                labels: [{ position: .5, attrs: {
                text: { text: "default"}}}],
              }),
              validateConnection: function(cellViewS, magnetS, cellViewT, magnetT, end, linkView) {
            // Prevent linking from input ports.
                if (magnetS && magnetS.getAttribute('type') === 'input') return false;
            // Prevent linking from output ports to input ports within one element.
                if (cellViewS === cellViewT) return false;
            // Prevent linking to input ports.
                return magnetT && magnetT.getAttribute('type') === 'input';
              },
            // validateMagnet: function(cellView, magnet) {
            //     // Note that this is the default behaviour. Just showing it here for reference.
            //     // Disable linking interaction for magnets marked as passive (see below `.inPorts circle`).
            //     return magnet.getAttribute('magnet') !== 'passive';
            // }
              validateConnection: function(sourceView, sourceMagnet, targetView, targetMagnet) {
                return sourceMagnet != targetMagnet;
              }
            });



            //function to create a cell that contains data from the data summary dropdown
            function createdataCell(){
                var value = $('#selection').val();
                var name = prompt("please enter the name of the node");
                var cell = dataCell(value, name);
                graph.addCell(cell);

            }

            //function to return a datacell given the dtata and the name of the cell
            function dataCell(value,name){
              console.log("had found");
              var cell = new joint.shapes.devs.Model({
                position:{x:250, y:300},
                size: {width: 80, height: 80},
                inPorts: ['in1'],
                data: value,
                type: 'cell',
                outPorts: ['out1'],
                attrs: {
                  '.label': {text: name, 'ref-x':.4, 'ref-y': .2},
                  '.inPorts circle': { fill: '#16A085', type: 'input' },
                rect: {fill: 'lightblue'},
                  '.outPorts circle': { fill: '#E74C3C', type: 'output' }
                }
              });
              return cell;

            }

            //function to create an output cell that does not contain data
            function createOutputCell(name){
              document.python.action = name;
              console.log("had found");
              var cell = new joint.shapes.devs.Model({
                position:{x:250, y:300},
                size: {width: 80, height: 80},
                inPorts: ['in1'],
                type: 'cell',
                outPorts: ['out1'],
                attrs: {
                  '.label': {text: name, 'ref-x':.4, 'ref-y': .2},
                  '.inPorts circle': { fill: '#16A085', type: 'input' },
                rect: {fill: '#843000'},
                  '.outPorts circle': { fill: '#E74C3C', type: 'output' }
                }
              });
              return cell;
            }


            //function to create an output cell that let user enter its name
            function promptOutputCell(){
              const name = prompt("please enter the name of the cell");
              var cell = createOutputCell(name);
              graph.addCell(cell);
            }



            //click on the paper to create an output cell
            paper.on('blank:pointerclick', function(element, ev, x,y){
              promptOutputCell();
            });

            //double click on the cell to change the data inside the cell from the dropdown menu
            //double click on the link to change the name of the link
            paper.on('cell:pointerdblclick', function(element, ev, x,y){
            var cell = element.model;
            //- console.log(cell.get('attrs')['.label'] == undefined);
            if (cell.get('attrs')['.label'] != undefined){
              let string = $('#selection').val();
              console.log(string);
              if (cell.get('data') != null || cell.get('data') != undefined){
                cell.prop('data', string);
                console.log('changed');
              }
            }
            else {
              var text2 = prompt("please enter the link's name")
              cell.prop('labels/0/attrs/text/text', text2);
              }
            });
            
            //right click on the cell to delete the cell
            paper.on('cell:contextmenu', function(element, ev, x, y){
              var cell = element.model;
              graph.removeCells(cell);
              //- element.remove();

            });


            function savejson(){
            console.log(graph);
            var jSon = JSON.stringify(graph);
            console.log(jSon);
            document.getElementById('hh').value = jSon;
            }


            //load the regession template
            function loadRegression(){


              var data1 = dataCell('COUNT FEMALE', 'input1');
              var data2 = dataCell('COUNT MALE', 'input2');
              data1.translate(-220, -200);
              data2.translate(20, -200);
              graph.addCell(data1);
              graph.addCell(data2);
               var cell1 = createOutputCell('group');
               cell1.translate(-150,0);
              graph.addCell(cell1);
              var xlink = new joint.dia.Link({
                 source: { id: data1.id },
                 target: { id: cell1.id },
                 attrs: { '.marker-target': { d: 'M 10 0 L 0 5 L 10 10 z' }},
                type: 'link',
                labels: [{ position: .5, attrs: {
                text: { text: "groupAsX"}}}],
              });
              graph.addCell(xlink);

              var ylink = new joint.dia.Link({
                 source: { id: data2.id },
                 target: { id: cell1.id },
                 attrs: { '.marker-target': { d: 'M 10 0 L 0 5 L 10 10 z' }},
                type: 'link',
                labels: [{ position: .5, attrs: {
                text: { text: "groupAsY"}}}],
              });
              graph.addCell(ylink);


              var cell2 = createOutputCell('reg');
              cell2.translate(50,0);
              graph.addCell(cell2);

              
              var cell3 = createOutputCell('regsum');
              cell3.translate(250,0);
              graph.addCell(cell3);

              var link = new joint.dia.Link({
                 source: { id: cell1.id },
                 target: { id: cell2.id },
                 attrs: { '.marker-target': { d: 'M 10 0 L 0 5 L 10 10 z' }},
                type: 'link',
                labels: [{ position: .5, attrs: {
                text: { text: "regression"}}}],
              });
              graph.addCell(link);
              var link2 = new joint.dia.Link({
                 source: { id: cell2.id },
                 target: { id: cell3.id },
                 attrs: { '.marker-target': { d: 'M 10 0 L 0 5 L 10 10 z' }},
                type: 'link',
                labels: [{ position: .5, attrs: {
                text: { text: "regression summary"}}}],
              });
              graph.addCell(link2);


            }



            //run the graph in the backend
            function gJ(){
              var j = JSON.stringify(graph);
            
              var str = "hello, my name is Bowen";
              $.ajax({
                type:'POST',
                //- contentType: 'string',
                dataType:'text',
                url:'/shishi',
                data: {'haha':j},
                success :function(msg){
                  msg = msg.replace("??","?");
                  console.log(msg)
                  const str = msg.split("?");
                  console.log(str.length);
                  $('.sdf').hide();

                  if (str.length != 1){
                    var position = 0;
                    for (let i = 0; i < str.length; i++){
                      if (str[i] == '/images/scatterRegression_0.png'){
                        position = i;
                        $('.sdf').attr('src', '/images/scatterRegression_0.png');
                        $('.sdf').attr('width','300');
                        $('.sdf').attr('height','300');
                        $('.sdf').show();
                      }
                    }
                    console.log('index is');
                    console.log(position);
                    var st = '';
                    for (var j = 0; j < str.length; j++){
                      if (j != position && str[j] != ''){

                        st = st + str[j];
                        st = st + "\n\n\n";
                      } 
                    }
                    $('#xiaoshabi').text(st);

                  }
                  else{
                    console.log('has red');
                    $('#xiaoshabi').text(str[0]);

                  }
                }

              });
            }
      .col4
        p #{output}
        p#xiaoshabi The output of the Python scripts will be displayed here
        img.sdf(src = path3 width = '300' height = '300')

      .footer
        form(action = "javascript:gJ();")
          input(type ="submit")
        p  Special Thanks: Dr. Matias Carrasco Kind
        p  Authors: Bowen Song, Jiayin Lu, Yijia Qian, Dinyang Chen
        p  We are math students from UIUC
