doctype html
html
  head
    meta(charset='UTF-8')
    style.
      .myholder {
      width: 800px;
      height: 800px;
      border-top: 2px solid black;
      border-bottom: 2px solid black;
      }
    title GPython
    link(rel='stylesheet', type='text/css', href='/stylesheets/joint.css')
    link(rel='stylesheet', type='text/css', href='/stylesheets/mycss.css')
    <script type="text/javascript" src="http://canvg.github.io/canvg/rgbcolor.js"></script> 
    <script type="text/javascript" src="http://canvg.github.io/canvg/StackBlur.js"></script>
    <script type="text/javascript" src="http://canvg.github.io/canvg/canvg.js"></script> 
    script(src = '/javascripts/Filesaver.js')
    script(src='/javascripts/jquery.min.js')
    script(src='/javascripts/lodash.min.js')
    script(src='/javascripts/backbone-min.js')
    script(src='/javascripts/joint.js')
    script(src='/javascripts/joint.shapes.devs.js')
    script(src='/javascripts/helpers.js')
  body
    .head
      .fonts
        p
          | This is an interactive graphing tool for running Python scripts and analyzing data

        canvas(width = "1500", height= "1600", style=  "display: none", id = "canvas")
    .container
      //- p
      //-   | Cell size selector

      //- input(type="range" min="1" max="100" value="50" class="slider" id="myRange", onclick = 'javasciprt:console.log(this.value)')

      #editor.editor
        p
          | Select the type of the cell you want to insert
        input(type = 'image', value = 'circle', src = '/images/circle.jpg', id = 'close_image1', onclick = 'javascript:change_state(this)')
        input(type = 'image', value = 'rectangle', src = '/images/rectangle.png', id = 'close_image2', onclick = 'javascript:change_state(this)')
        input(type = 'image', value = 'c_d_link', src = '/images/link.png', id = 'close_image3', onclick = 'javascript:change_state(this)')
        input(type = 'image', value = 'link', src = '/images/line.png', id = 'close_image4',onclick = 'javascript:change_state(this)')
        input(type = 'image', value = 'w_c_d_link', src = '/images/c_d_link.png', id = 'close_image5',onclick = 'javascript:change_state(this)')
        input(type = 'image', value = 'w_d_link', src = '/images/d_link.jpg', id = 'close_image6',onclick = 'javascript:change_state(this)')
        input(type = 'image', value = 'line', src = '/images/st_line.png', id = 'close_image7',onclick = 'javascript:change_state(this)')
        input(type = 'image', value = 'c_line', src = '/images/curved_line.jpg', id = 'close_image8',onclick = 'javascript:change_state(this)')
        input(type = 'image', value = 'w_line', src = '/images/st_line.png', id = 'close_image9',onclick = 'javascript:change_state(this)')
        input(type = 'image', value = 'w_c_link', src = '/images/st_line.png', id = 'close_image10',onclick = 'javascript:change_state(this)')
        p
          | Select the color of the cell you want

        span
          | cell color
        input(id = 'cell_color', name="Color_Picker", type="color", value = "#FFFFFF", style = "display:inline") 
        span
          | font color
        input(id = 'cell_color2', name="font_color_Picker", type="color", value = "#000000", style = "display:inline") 


      .nametag
        form(name = 'cell_name', action = "javascript:void(0)", id = 'change_cell_name')
          textarea(name = 'enter_name', placeholder = 'Enter the name of the cell')
          input(type = 'submit', value = 'Enter', onclick = 'javascript:createCustomCell(this)')
      .cell_editor
        form(name = 'cell_editor', action = "javascript:void(0)")
          p
            | Change the size of the cell
          input(type = "range", value = "100", min = "1", max = "200", class = 'slider', name = 'cell_size')
          #colorchanger(style = 'display:none')
            p
              | Change the color of the cell (select from graph editor)
          input(type = "checkbox", name = "color", onchange = 'javascript:if (this.checked){$("#colorchanger").show();}else{$("#colorchanger").hide();}') 
          span
            | Do you want to change the color?
          p
            | Change the font size
          input(type = "range", value = "15", min = "1", max = "30", class = 'slider', name = 'font_size')
          p
            | Change the name of the cell
          textarea(name = "enter_name", placeholder = 'change the name of the cell', class = 'textbox')
          
          input(type = "submit", value = "confirm", class = 'button', onclick = 'javascript: changeCellName()')
          input(type = "submit", value = "close", class = 'button', onclick = "javascript: $('.cell_editor').hide();")
          input(type = "submit", value = "clone the cell", class = 'button', onclick = "javascript: clone_cell()")

      .col
        .col1
          form(name='python', action = 'javascript:upload()')
            label.custom-file-upload(for='uploadjson')
              span( class = 'choose')
                | Choose your json graph file           
            input(type = 'file', id = 'uploadjson', style = 'display:none')
            input(type='submit', value='upload graph json', class = 'button')
          form(method='POST', action='/file_upload', enctype='multipart/form-data')
            label.custom-file-upload(for='file-upload')
              span( class = 'choose')
                | Choose your csv file            
              input#file-upload(type='file', name = 'foo' style='display:none;')

            //- input(type='file', name='foo', size='50' )
            input(type='submit', value='Upload File' class = 'button'  onclick = 'seek();')
            span #{message}
          form(name='hello', onsubmit='savejson();')
            | Paste your JSON file here: 
            input#hh(type='text', name='JSON file')
            input(type='submit', name='Run', value='Run', class = 'button' )
            p
              h4
                | Operating Instructions:
              ul
                li
                  | In order to create a cell, first click on the graph editor
                li
                  | Then select the type of cell you want to create by clicking the icon on the graph editor, 
                li
                  | After that click on the 
                  b blank paper below buttons
                  |  system will ask you to enter the name of the cell, after you finished typing the name press enter
                li
                  | In order to change the attribute of a cell, double click on the cell, an editor will appear.
                li
                  | Select the size and enter the new name of your cell, then click "confirm"

          form(action = "javascript:gJ();")
            input(type ="submit" value ='Run' class = 'button')
          form(action = "javascript:loadRegression();")
            input(type = 'submit' value = 'Load Regression Template' class = 'button')
          input(type = 'submit', value = 'NaN', id = 'display_option', style = 'display:none')

          input(type = 'submit',value = 'build tree', onclick = 'javascript:grow();', class = 'button')

          
        .col2
          form(action = "javascript:show();")
            input(id = 'hahaha', type = 'submit', name = 'why2', value = 'show the summary of the dataset', class = 'button')
          p 
            | The data summary will be shown here
          .dropDown(style= 'display: none;')
            form(name = 'drop', id = 'selectform' action = '/')
              select(multiple='' style = 'height:100px;' id ='selection' name = 'bar')
          form(action = "javascript:createdataCell();")
            input(type = 'submit', name = 'hahahaha', value = 'create a data cell', class = 'button2')
          form(action = "javascript:promptOutputCell();")
            input(type = 'submit', name = 'ha', value = 'create an output cell', class = 'button3')

          input(id = 'edit', type = 'submit', name = 'na', value = 'show the graph editor', class = 'button', onclick = 'javascript:editor()')
          form(action = "javascript:save_json(graph);")
            input(type = 'submit' value = 'Save JSON' class = 'button')

          input(type = 'submit', value = 'Save SVG', class = 'button', onclick = "javascript: save_svg()")
          input(type = 'submit', value = 'Save PNG', class = 'button', onclick = "javascript: save_png()")
          input(type = 'submit', value = 'Clear the graph', class = 'button', onclick = "javascript: graph.clear()", style = 'display:block')
          span(id = 'infodata')  #{datainfo} 

        script. 
          $("selectform").submit(function(event){
            event.preventDefault();
            console.log('submitting');
            var $form = $(this),
                url = $form.attr('action');
            var posting = $.post(url, {name: $('#selection.val()')})
          });10

          function clone_cell(){
            var cell = graph.getCell(currentCellId);
            var new_cell = cell.clone();
            if (cell.isLink()){
              if (cell.prop('source/id') != undefined){
                source_cell = graph.getCell(cell.prop('source/id'));
                target_cell = graph.getCell(cell.prop('target/id'));
                console.log('source cell');
                console.log(source_cell);
                new_cell.prop('source', {x: source_cell.position().x + 100, y: source_cell.position().y + 100});
                new_cell.prop('target', {x: target_cell.position().x + 100, y: target_cell.position().y + 100});
              }
              else{
                console.log('re positioning')
                new_cell.prop('source', {x: cell.prop('source/x') + 50, y: cell.prop('source/y') + 50});
                new_cell.prop('target', {x: cell.prop('target/x') + 50, y: cell.prop('target/y') + 50});
              }
            }
            else{
              console.log('repositioning');
              console.log(cell.position().x)
              new_cell.position(cell.position().x +25, cell.position().y + 25);
            }
            graph.addCell(new_cell);
          }

          function changeCellName(){
            name = cell_editor.enter_name.value;
            var cell = graph.getCell(currentCellId);
            if(cell.isLink()){
              console.log('link');
              cell.prop('attrs/text/text', name);
            }
            else{
              cell.prop('attrs/text/text', name);
              cell.size({width: parseFloat(cell_editor.cell_size.value), height: parseFloat(cell_editor.cell_size.value)});
              if (cell.prop('attrs/circle') != undefined){
                
                var checked = cell_editor.color.checked;
                if (checked){
                  var color = $('#cell_color')[0].value;
                  var text_color = $('#cell_color2')[0].value;
                  cell.prop('attrs/circle/fill', color);
                  cell.prop('attrs/text/fill', text_color);
                }

                cell.prop('attrs/text/font-size', cell_editor.font_size.value);
                //- cell.prop('attrs/circle/fill', color);
              }

              else if (cell.prop('attrs/rect') != undefined){
                var color = $('#cell_color')[0].value;
                cell.prop('attrs/rect/fill', color);
                if (checked){
                  var color = $('#cell_color')[0].value;
                  var text_color = $('#cell_color2')[0].value;
                  cell.prop('attrs/rect/fill', color);
                  cell.prop('attrs/text/fill', text_color);
                }
                cell.prop('attrs/text/font-size', cell_editor.font_size.value);
              }
            }
          }

          function seek(){
            $('#hahaha').show();
          }
          function show(){
            $.post("/show_summary", function(data, status){
              //- $('.helo').text(data);
              console.log(data);
              const str = data.split(',');
              console.log(str[0]);
              $('.helo').css('color','black');
              $('.helo').css('font-size', '20px');
              var select = document.getElementById('selection');
              for (let i = 0; i < str.length; i++ ){
                $('#selection').append($('<option>', {text: str[i], value: str[i]}));
                //- select.options[i].text = str[i];
                //- console.log(str[i]);
              }
              //- $('.helo').css('border','2px solid black');
              $('.dropDown').show();
            
            });
          }

      script.
        dragElement(document.getElementById("editor"));

      script.
        function changeval(){
        var a = prompt("enter the link name");
        document.getElementById('links').value = a;

        } 
      .col3
        #paper.paper
          #myholder
          script.
            var graph = new joint.dia.Graph;
            var paper = new joint.dia.Paper({
              el: $('#paper'),
              width: $('.paper').width(), height: $('.paper').height(), gridSize: 1,
              model: graph,
              background: {
              color: '#e6e6e6'
              },
              defaultLink: new joint.dia.Link({
                attrs: { '.marker-target': { d: 'M 10 0 L 0 5 L 10 10 z' }},
                type: 'link',
                labels: [{position: .5, attrs: {
                  text: {text: ''}
                }}],
                vertices: []
              }),
              validateConnection: function(cellViewS, magnetS, cellViewT, magnetT, end, linkView) {
            // Prevent linking from input ports.
                if (magnetS && magnetS.getAttribute('type') === 'input') return false;
            // Prevent linking from output ports to input ports within one element.
                if (cellViewS === cellViewT) return false;
            // Prevent linking to input ports.
                return magnetT && magnetT.getAttribute('type') === 'input';
              },
              validateMagnet: function(cellView, magnet) {
                 // Note that this is the default behaviour. Just showing it here for reference.
                 // Disable linking interaction for magnets marked as passive (see below `.inPorts circle`).
                 return magnet.getAttribute('magnet') !== 'passive';
              },
              validateConnection: function(sourceView, sourceMagnet, targetView, targetMagnet) {
                return sourceMagnet != targetMagnet;
              }
            });
            //- paper.on('cell:pointerup', function (cellView, evt) {
            //-   var elem = cellView.model
            //-   var source = elem.get('source')
            //-   var target = elem.get('target')
            //-   if (elem instanceof joint.dia.Link && (!source.id || !target.id)) {
            //-       elem.remove()
            //-   }
            //- })

            //function to create a cell that contains data from the data summary dropdown
            function createdataCell(){
                var value = $('#selection').val();
                var name = prompt("please enter the name of the node");
                var cell = dataCell(value, name);
                graph.addCell(cell);

            }

            

            //function to return a datacell given the dtata and the name of the cell
            function dataCell(value,name){
              console.log("had found");
              var cell = new joint.shapes.devs.Model({
                position:{x:250, y:300},
                size: {width: 80, height: 80},
                inPorts: ['in1'],
                data: value,
                outPorts: ['out1'],
                attrs: {
                  '.label': {text: name, 'ref-x':.4, 'ref-y': .2},
                  '.inPorts circle': { fill: '#16A085', type: 'input' },
                rect: {fill: 'lightblue'},
                  '.outPorts circle': { fill: '#E74C3C', type: 'output' }
                }
              });
              return cell;

            }

            //function to create an output cell that does not contain data
            function createOutputCell(name){
              document.python.action = name;
              console.log("had found");
              var cell = new joint.shapes.devs.Model({
                position:{x:250, y:300},
                size: {width: 80, height: 80},
                inPorts: ['in1'],
                outPorts: ['out1'],
                attrs: {
                  '.label': {text: name, 'ref-x':.4, 'ref-y': .2},
                  '.inPorts circle': { fill: '#16A085', type: 'input' },
                rect: {fill: '#843000'},
                  '.outPorts circle': { fill: '#E74C3C', type: 'output' }
                }
              });
              return cell;
            }


            //function to create an output cell that let user enter its name
            function promptOutputCell(){
              const name = prompt("please enter the name of the cell");
              var cell = createOutputCell(name);
              graph.addCell(cell);
            }
            var currentCellId  ='';



            //click on the paper to create an output cell

            //double click on the cell to change the data inside the cell from the dropdown menu
            //double click on the link to change the name of the link
            paper.on('cell:pointerdblclick', function(element, ev, x,y){
              //- console.log('yes');
              var cell = element.model;
              var name = cell.get('attrs').text;
              var labels = cell.get('labels');
              if (name == undefined && labels == undefined){
                name = cell.get('attrs')['.label'].text;
              }
              else if (name == undefined){
                name = labels[0].attrs.text.text;
              }
              else{
                name = name.text;
              }
              $('.cell_editor').children('form')[0]['enter_name'].value = name;
              $('.cell_editor').css({top: y + 450  + 'px', left: x +80 + 'px', position: 'absolute'});
              console.log('yes');
              $('.cell_editor').show();
              currentCellId = cell.id;
            //- console.log(cell.get('attrs')['.label'] == undefined);
              //- if (cell.get('attrs') != undefined){
              //-   console.log('changed');
              //-   var text2 = prompt("please enter the cell's name")
              //-   let string = $('#selection').val();
              //-   //- console.log(string);
              //-   //- console.log(cell.get('attrs').text);
              //-   cell.prop('attrs/text/text', text2);
              //-   if (cell.get('data') != null || cell.get('data') != undefined){
              //-     cell.prop('data', string);
              //-     console.log('changed');
              //-   }
              //- }
              //- else {
              //-   var text2 = prompt("please enter the link's name")
              //-   cell.prop('labels/0/attrs/text/text', text2);
              //-   }
            });
            
            //right click on the cell to delete the cell
            paper.on('cell:contextmenu', function(element, ev, x, y){
              var cell = element.model;
              graph.removeCells(cell);
              //- element.remove();

            });

            paper.on('blank:pointerclick', function(evt, x, y){
              console.log('x' + x);
              console.log('y' + y)
              var state = document.getElementById('display_option');
              console.log(state.value);
              $('.nametag').css({top: y + 450  + 'px', left: x + 'px', position: 'absolute'});
              $('.nametag').show();

              console.log($('.nametag').css('z-index'));
              //- console.log($('.col3').css('z-index'));

            })


            function savejson(){
            console.log(graph);
            var jSon = JSON.stringify(graph);
            console.log(jSon);
            document.getElementById('hh').value = jSon;
            }

          


            //load the regession template
            function loadRegression(){


              var data1 = dataCell('COUNT FEMALE', 'input1');
              var data2 = dataCell('COUNT MALE', 'input2');
              data1.translate(-220, -200);
              data2.translate(20, -200);
              graph.addCell(data1);
              graph.addCell(data2);
               var cell1 = createOutputCell('group');
               cell1.translate(-150,0);
              graph.addCell(cell1);
              var xlink = new joint.dia.Link({
                 source: { id: data1.id },
                 target: { id: cell1.id },
                 attrs: { '.marker-target': { d: 'M 10 0 L 0 5 L 10 10 z' }},
                type: 'link',
                labels: [{ position: .5, attrs: {
                text: { text: "groupAsX"}}}],
              });
              graph.addCell(xlink);

              var ylink = new joint.dia.Link({
                 source: { id: data2.id },
                 target: { id: cell1.id },
                 attrs: { '.marker-target': { d: 'M 10 0 L 0 5 L 10 10 z' }},
                type: 'link',
                labels: [{ position: .5, attrs: {
                text: { text: "groupAsY"}}}],
              });
              graph.addCell(ylink);


              var cell2 = createOutputCell('reg');
              cell2.translate(50,0);
              graph.addCell(cell2);

              
              var cell3 = createOutputCell('regsum');
              cell3.translate(250,0);
              graph.addCell(cell3);

              var link = new joint.dia.Link({
                 source: { id: cell1.id },
                 target: { id: cell2.id },
                 attrs: { '.marker-target': { d: 'M 10 0 L 0 5 L 10 10 z' }},
                type: 'link',
                labels: [{ position: .5, attrs: {
                text: { text: "regression"}}}],
              });
              graph.addCell(link);
              var link2 = new joint.dia.Link({
                 source: { id: cell2.id },
                 target: { id: cell3.id },
                 attrs: { '.marker-target': { d: 'M 10 0 L 0 5 L 10 10 z' }},
                type: 'link',
                labels: [{ position: .5, attrs: {
                text: { text: "regression summary"}}}],
              });
              graph.addCell(link2);


            }



            //run the graph in the backend
            function gJ(){
              var j = JSON.stringify(graph);
            
              var str = "hello, my name is Bowen";
              $.ajax({
                type:'POST',
                //- contentType: 'string',
                dataType:'text',
                url:'/shishi',
                data: {'haha':j},
                success :function(msg){
                  msg = msg.replace("??","?");
                  console.log(msg)
                  const str = msg.split("?");
                  console.log(str.length);
                  $('.sdf').hide();

                  if (str.length != 1){
                    var position = 0;
                    for (let i = 0; i < str.length; i++){
                      if (str[i] == '/images/scatterRegression_0.png'){
                        position = i;
                        $('.sdf').attr('src', '/images/scatterRegression_0.png');
                        $('.sdf').attr('width','300');
                        $('.sdf').attr('height','300');
                        $('.sdf').show();
                      }
                    }
                    console.log('index is');
                    console.log(position);
                    var st = '';
                    for (var j = 0; j < str.length; j++){
                      if (j != position && str[j] != ''){

                        st = st + str[j];
                        st = st + "\n\n\n";
                      } 
                    }
                    $('#xiaoshabi').text(st);

                  }
                  else{
                    console.log('has red');
                    $('#xiaoshabi').text(str[0]);

                  }
                }

              });
            }
      //- .col4
      //-   p #{output}
      //-   p#xiaoshabi The output of the Python scripts will be displayed here
      //-   img.sdf(src = path3 width = '300' height = '300')

    .footer
      form(action = "javascript:gJ();")
        input(type ="submit")
      p  Special Thanks: Dr. Matias Carrasco Kind
      p  Authors: Bowen Song, Jiayin Lu, Yijia Qian, Keye Zhang
      p  We are math students from UIUC
